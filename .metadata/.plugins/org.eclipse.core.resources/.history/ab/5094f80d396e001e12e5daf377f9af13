package day10;

/*
 * Java 8 features:
 * =================
 * Lambda Expressions
 * 
 * Functional Interface -
 *  interface with single abstract method is called
 *     functional interface
 *     
 *   Rules for writing lambda expressions
 *      1. method return type not required
 *      2. method name not required
 *      3. {} & 'return' keyword not required if method
 *         body is having only one statement.
 *      4. input args data type not required
 *      5. insert '->' between input args & method body
 *      6. {} & 'return' keyword required when method body having more than one statement.
 *      
 * 
 * 
 * 
 */

/*

class Calc {
	int add(int x, int y) {
		return x+y;
	}
	String greet() {
		return "Hello World!";
	}
	
	// ()->"Hello World!";
	boolean isEven(int num) {
//		if(num%2==0) {
//		  return true;
//		}
//		return false;
 		//num%2==0?true:false
	}
	
	num -> {
	
	if(num%2==0) {
		return true;
	}
	return false;
	
	}
}

public class LambdaExpressionDemo {

	public static void main(String[] args) {
		Calc c = new Calc();
		System.out.println(c.add(10, 20));

	}

}
*/
// Step 1 - create functional interface with single abstract
//            method
@FunctionalInterface
interface Intf1 {
	int add(int x, int y);
}

@FunctionalInterface
interface Intf2 {
	String greet();
}

@FunctionalInterface
interface Intf3 {
	boolean isEven(int num);
}

public class LambdaExpressionDemo {

	public static void main(String[] args) {
		// lambda expression
		Intf1 a = (x,  y) -> x+y;
		
		System.out.println(a.add(10, 20));
		
		// multiply two numbers
		Intf1 m = (x,y)->x*y;
		System.out.println(m.add(10, 10)); // 100
				
		//Scenario 2:  no intput arguments & return type is String
		Intf2 g = ()->"Hello World!";
		System.out.println(g.greet());
		
		// Scenario 3: isEven
		Intf3 even = num -> {
			
			if(num%2==0) {
				return true;
			}
			return false;
			};
	}
	}

}